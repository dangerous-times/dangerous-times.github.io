<!DOCTYPE html>
<html lang="en">
<head>
	<meta http-equiv="Content-Type" content="text/html; charset=utf-8">
	<meta name="viewport" content="width=device-width, initial-scale=1.0">
	  <!--
	Meta data integrates the page to social media like twitter & facebook. Generated meta tags using https://metatags.io/ using <h1> above for title and first <p> for description. Don't forget to remove <br/>.
	OG:URL & TWITTER:URL point to the full web address of the HTML.
	OG:IMAGE & TWITTER:IMAGE point full web address of a PNG (not JPG) image. to be displayed. 
	change OG:TYPE to article.
	-->
	
	<!-- Primary Meta Tags -->
	<title>Firearm homicides up by staggering 35% in 2020 according to CDC data</title>
	<meta name="title" content="Firearm homicides up by staggering 35% in 2020 according to CDC data">
	<meta name="description" content="More alarming is black males were 54% of firearm homicides in 2020. According UN ODC data, black male homicide rate (59 per 100k) is now higher than every country in the world (highest is 49 per 100K). Should America be proud or do we have a morality problem?">
	
	<!-- Open Graph / Facebook -->
	<meta property="og:type" content="article">
	<meta property="og:url" content="https://dangerous-times.github.io/cdc/homicide.htm">
	<meta property="og:title" content="Firearm homicides up by staggering 35% in 2020 according to CDC data">
	<meta property="og:description" content="More alarming is black males were 54% of firearm homicides in 2020. According UN ODC data, black male homicide rate (59 per 100k) is now higher than every country in the world (highest is 49 per 100K). Should America be proud or do we have a morality problem?">
	<meta property="og:image" content="https://dangerous-times.github.io/cdc/social_media_photo1.png">
	
	
	<!-- Twitter -->
	<meta property="twitter:card" content="summary_large_image">
	<meta property="twitter:url" content="https://dangerous-times.github.io/cdc/homicide.htm">
	<meta property="twitter:title" content="Firearm homicides up by staggering 35% in 2020 according to CDC data">
	<meta property="twitter:description" content="All Homicides up by 30% in 2020 for a total of 24,576! Black male homicide reached 59 per 100K black males while white male homicide was a mere 4 per 100K white males. Per capita, that's 18X! Look at the graphs and CDC data to see for yourself.">
	<meta property="twitter:image" content="https://dangerous-times.github.io/cdc/social_media_photo1.png">
		
	<!-- Dygraph -->
	<link rel="stylesheet" href="./dygraph.css">
		<script type="text/javascript" src="./dygraph.min.js"></script>
	
	<!-- Menu -->
	<style>
		a:hover,a:focus { color: #999; text-decoration: none; outline: 0; }
	
		nav:before,nav:after { content: " "; display: table; }
		nav:after { clear: both; }
	
		.menu { 
			margin: 0 auto; max-width: 7in;
			background-color: black;
			position:fixed; top:0; left:0;
			z-index: 500;
		}
	</style>

	<!-- data table -->
	<style>
		#table tr {
			background-color: white;
		}
		.column1 { 
			position: -webkit-sticky;  /* for safari */ 
			position: sticky; 
			left: 0;
			background-color: inherit;
		}
		.header {
			position: -webkit-sticky;  /* for safari */ 
			position: sticky; 
			top: 0;
			z-index: 100;
		}

	</style>
	<link rel="stylesheet" href="menu.css" />

	<!-- Dygraphs styling -->
	<style>
		.dygraph-title {font-size: 18pt}
		.dygraph-legend-line {border-bottom-width: 7px;}
	</style>

	<script type="text/javascript">
		/* Load the menu */
		async function load_menu() {
			p = Object();     // Permanent shared variables
			t = Object();     // shared temp variables
			document.getElementById('menuHomicide').outerHTML = await read_file("menuHomicide.table");
		}

		/* setup table row selection */
		function setup_row_selection() {
			window.onclick = function(e) {
				if (e.target.nodeName != "TD" || e.target.parentElement.rowIndex == 0) 
					return;
				if (e.target.parentElement.style.backgroundColor == "") {  // User wants to select this line
					e.target.parentElement.style.backgroundColor = "lightgreen";
					p.selected_rows.push(e.target.parentElement);  // add selected row
					let sort_selected_rows = [];
					for (let i = 0; i<p.selected_rows.length; i++) {
						sort_selected_rows.push([
							('000000' + p.selected_rows[i].rowIndex).slice(-7), 
							p.selected_rows[i]
						]);
					}
					sort_selected_rows.sort();
					p.selected_rows = [];
					for (i = 0; i<sort_selected_rows.length; i++)
						p.selected_rows.push( sort_selected_rows[i][1] );
				
				} else {  // removing a selected row
					e.target.parentElement.style.backgroundColor = "";
					while (p.selected_rows.indexOf(e.target.parentElement) >= 0)
						p.selected_rows.splice(p.selected_rows.indexOf(e.target.parentElement),1)
				}

				display_graph();
			}
		}

		/* read a file */
		async function read_file(url, optional) {
			let resp = await fetch(url);
			if (resp.status == 404 & optional == "optional")
				return( "" );     // HTTP state 404 means page not found
			let resp2 = "";
			if (resp.status != 200)
				resp2 += "<br/>" + url + " failed with http code "  + resp.status + "<br/>";
			resp2 += await resp.text(); // wait for complete response and read it
			return( resp2 ); // read response body as text
		}

		/* load new table */
		async function load_table(element) {

			document.getElementById("info").innerHTML = "";
			document.getElementById("title").innerHTML = "";
            document.getElementById("graph_actual").innerHTML = "";
            document.getElementById("graph_per100k_legend").innerHTML = "";
            document.getElementById("graph_actual_legend").innerHTML = "";
			document.getElementById("graph_per100k").innerHTML = "";
			document.getElementById("table").innerHTML = "";

			/* Parse the URL for the graph to display */
			if (element != undefined) {
				window.location.replace(location.origin + location.pathname 
					+ "?graph=" + element.id)
			}
			let url = window.location.href.split("?");
			t.graph = "";
			if (url.length == 2) {     // Get graph name from URL
				let urlArgs = url[1].split("&");
				for (let i=0; i<urlArgs.length; i++)
					if (urlArgs[i].substring(0,6) == "graph=")
						t.graph = urlArgs[i].substring(6);
			}

			/* Use table1 as the default table (all usa per 100K) */
			if (t.graph == "") {
				document.getElementById("info").innerHTML = await read_file("intro.info"); 
				return;
			}

			document.getElementById("graph_per100k").innerHTML = "<h1>Graph will display when CDC data has been downloaded</h1>";
			document.getElementById("table").innerHTML = "<h1>Downloading CDC data</h1>";

			document.getElementById("info").innerHTML = await read_file(t.graph  + ".info", "optional");
			document.getElementById("table").innerHTML = await read_file(t.graph  + ".table");

			/* Get the table info */
			let table = document.getElementById('table').getElementsByTagName("table");
			if (table.length == 1) {
				let rows = table[0].getElementsByTagName('tr');
				rows[0].classList.add("header");
				let table_info = rows[rows.length-1].children[0].innerHTML;
				if (table_info.substr(0,11) != "table_info ") {  // Displaying original CDC data
					document.getElementById("graph_per100k").innerHTML = "";
					document.getElementById("graph_per100k").style.height = "";
					document.getElementById("graph_actual").style.height = "";
					return;
				}
				for (let i=0; i<rows.length; i++)
					rows[i].children[0].classList.add("column1");
				document.getElementById("work").innerHTML = "<div id='work2' " + table_info.substr(11) + ">work area</div>";
				let work2 = document.getElementById("work2");
				p.data_source = work2.getAttribute("data_filename");
				p.graph_type = work2.getAttribute("data_type");
				p.per100k_start = parseInt(work2.getAttribute("data_start_per100k"))-1;     // relative to 0
				p.actual_start = parseInt(work2.getAttribute("data_start_actual"))-1;     // relative to 0
				p.change_start = parseInt(work2.getAttribute("data_start_changed"))-1;     // relative to 0
				rows[rows.length-1].outerHTML = "" // Remove the table_info row
				p.step_count = 1;         // actual columns follow the per100k columns
				if (p.per100k_start+1==p.actual_start)
					p.step_count = 2;         // per100k & actual are next to each other a
			} else { 
				document.getElementById("info").innerHTML += "<br/>Internal error - <table> not found";
				return;
			}

			t.title_element = document.getElementById("table").children[0];
			if (t.title_element.nodeName == "A") {
				document.getElementById("title").innerHTML = 
					"<h1>" + t.title_element.innerText.substring(t.title_element.innerText.search(": ") + 1) + "</h1>";
				t.title_element.outerHTML = "<h2><a id='" + p.data_source.replace(".csv","") + "' href='#' onclick='load_table(this);'>Click here to view the original CDC data</a></h2>";
			}

			/* Create list of selected rows */
			t.tr_elements = document.getElementById("table").getElementsByTagName("tr"); // <tr>
			t.tr_elements[0].style.backgroundColor = 'lightblue';
			p.selected_rows = [t.tr_elements[0]];
			t.tr_elements[0].children[0].classList.add("stickyLeft");
			for ( let i=1; i<t.tr_elements.length; i++) {     // skip header 
				t.tr_elements[i].children[0].classList.add("stickyLeft");
				if (t.tr_elements[i].firstElementChild.bgColor != "") {
					p.selected_rows.push(t.tr_elements[i]);
					t.tr_elements[i].style.backgroundColor = "lightgreen";
					t.td_elements = t.tr_elements[i].getElementsByTagName("td")
					for (let j=0; j<t.td_elements.length; j++) {
						t.td_elements[j].bgColor = "";
					}
				}
			}
			
			display_graph();

			t = Object(); // get rid of shared temporary variables
		}

		/* display graph from p.selected_rows */
		function display_graph() {

			/*  */
			let graph_per100k = [];
			let graph_actual = [];
			let fix_column_titles = [];

			for (t.row_num=0; t.row_num<p.selected_rows.length; t.row_num++) {
				let columns = p.selected_rows[t.row_num].getElementsByTagName("td");
				graph_per100k.push([columns[0].textContent]);     // First column is the key
				graph_actual.push([columns[0].textContent]);      // First column is the key

				for (let column_num=p.per100k_start; column_num<p.change_start; column_num+=p.step_count) {
					if (p.step_count == 2) {   // per100k & actual in pairs next to each other
						if (t.row_num == 0) {  // title row - use years without text
							let year = columns[column_num].textContent.substring(0,4);
							graph_per100k[t.row_num].push(year);
							graph_actual[t.row_num].push(year);
							fix_column_titles.push({v: year, label: year});
						} else {
							graph_per100k[t.row_num].push(columns[column_num].textContent.replace(",",""));
							graph_actual[t.row_num].push(columns[column_num+1].textContent.replace(",",""));
						}
					} else {
						if (column_num < p.actual_start)    // Per100k columns before actual columns
							graph_per100k[t.row_num].push(columns[column_num].textContent.replace(",",""));
						else								// Actual columns after per100k columns
							graph_actual[t.row_num].push(columns[column_num].textContent.replace(",",""));
					}
				}
			} 

			graph_per100k[0][0] = graph_per100k[0][0].replaceAll(","," "); // Comma causes problems
			graph_actual[0][0] = graph_actual[0][0].replaceAll(","," "); // Comma causes problems
			if (p.step_count != 2) {
				graph_per100k[0][1] = "0";     // age must be numeric
				graph_actual[0][1] = "0";      // age must be numeric
				graph_per100k[0][graph_per100k[0].length-1] = 101;     // age must be numeric
				graph_actual[0][graph_actual[0].length-1] = 101;        // age must be numeric
				for (let i = 5; i<100; i+=5)   // label every 5 years
					fix_column_titles.push({v: i, label: i});
				fix_column_titles.push({v: 100, label: "100"});
			} 

			call_graph( graph_per100k, 
				"graph_per100k", 
				"per 100K population by race and gender",
				fix_column_titles
			)

			call_graph( graph_actual, 
				"graph_actual", 
				"Actual numbers by race and gender",
				fix_column_titles
			)

		}

		function call_graph( graph_data, graph_div_id, graph_title, graph_fix_column_titles) {
			/* create tab seperated data and flip XY */
			let graph_data_csv = "";
			for (let row in graph_data[0]) {
				for (let column in graph_data) {
					graph_data_csv += graph_data[column][row] + "\t";
				}
				graph_data_csv = graph_data_csv.substring( 0, graph_data_csv.length-1 ) + "\n";
			}
			if (p.step_count == 2)
				graph_data_csv += graph_data[0][graph_data[0].length-1] + ".01\t\n";  // to force display of last column, we need another column that is .01 larger 
			
			graph = new Dygraph(document.getElementById( graph_div_id ), graph_data_csv, {
				// options go here. See http://dygraphs.com/options.html
				legend: 'always',
				animatedZooms: true,
				strokeWidth: 4.5,    	
				title: graph_title,
				labelsDiv: document.getElementById( graph_div_id + "_legend"),
				labelsDivStyles: {
					'textAlign': 'right'
				},
				labelsSeparateLines: true,
				axes: {
					x: {
						ticker: function(min, max, pixels, opts, dygraph, vals) {
							return graph_fix_column_titles;
						},
					},
				}
			});
		}
	</script>

</head>

<body onload='load_menu(); setup_row_selection(); load_table();'>

	<div class="menu">
		<nav>
		  <ul class="nav-menu nav-center">
			<li><a onclick="window.location.replace(location.origin + location.pathname);" class="nav-active">Home</a></li>
			<li><a>CDC homicide graphs</a>
			  <ul>
				<li id="menuHomicide">menuHomicide failed to load</li>
				<li><a>Download files</a>
				  <ul>
					<li><a download href="cdc_homicide_graphs.7z">Code & files used to build CDC graphs</a></li>
				  </ul>
				</li>            
			  </ul>
			</li>
			<li><a>About</a>
			  <ul>
				<li><a href="mailto:defend-constitution@protonmail.com" class="nav-active">Email defend-constitution@protonmail.com</a></li>
			  </ul>
			</li>
		  </ul>
		</nav>
	</div>
				
	
	<p>&nbsp;</p><!-- eliminate first line overlayed -->
	<div id="title"></div>
	<div id="info" style="max-width: 9in;"></div>
	<table> <tr> <td><div id="graph_per100k"></div></td>  <td><div id="graph_actual"></div></td> </tr>
			<tr> <td> <div id="graph_per100k_legend"></div></td> <td> <div id="graph_actual_legend"></div></td> </tr>
	</table>
	<div id="table" ></div>
	<div id="work" style="display: none;"></div>

	<a href='https://thesiswritingservice.net/'>thesiswritingservice.net</a> 
	<script type='text/javascript' src='https://www.freevisitorcounters.com/auth.php?id=38e308d18c7243f2f7bbc10b1537c7a22f10096a'></script>
	<script type="text/javascript" src="https://www.freevisitorcounters.com/en/home/counter/952828/t/0"></script>

</body></html>